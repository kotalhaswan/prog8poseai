const nn = ml5.neuralNetwork({ task: 'classification', debug: true })
let testData = []
function fetchJSONData() {
    fetch("./training-data/pose_export.json")
        .then((res) => res.json())
        .then((data) => trainNN(data))
        .catch((error) => console.error("Unable to fetch data:", error));
}
fetchJSONData();

async function trainNN(arrData,epochNum=70)
{
        console.log(arrData);
        for (let i = 0; i < arrData.length; i++)
        {
                let poses = arrData[i];
                // let testSize = Math.floor(poses.data.length * 0.8); //Only use 80% of the data for training.
                // const trainingData= poses.data.slice(testSize);
                // const testDataBatch= poses.data.slice(0, testSize);
                poses.data.sort(() => (Math.random() - 0.5))
                const trainingData = poses.data.slice(0, Math.floor(poses.data.length * 0.8))
                const testDataBatch = poses.data.slice(Math.floor(poses.data.length * 0.8) + 1)

                        for(let x =0; x<trainingData.length; ++x)
                        {

                                        console.log(trainingData[x] + " " + poses.label);
                                        nn.addData(trainingData[x],{label: poses.label})

                        }
                for(let x =0; x<testDataBatch.length; ++x)
                {
                        {
                                let newTestData = {label:poses.label,
                                        data:testDataBatch[x]}
                                testData.push(newTestData)
                                console.log( "Test Data : " + testData.indexOf(newTestData));
                        }
                }
        }
        nn.normalizeData()
        nn.train({ epochs: epochNum }, () => finishedTraining())
}
async function runTestPrediction()
{
        let correctPose = 0;
        for(let i =0; i<testData.length; ++i)
        {
                let data = testData[i].data;
                let correctLabel = testData[i].label;
                const results = await nn.classify(data);
                // console.log("This might be : " + results[0].label)
                console.log("This might be : " + results[0].label + " " + results[0].confidence)
                if(results[0].label === correctLabel)
                {
                        correctPose++;
                }
        }
        const accuracy = (correctPose/testData.length)*100; //so that 50 percant wont show as 0.5 or something
        console.log(`My accuracy: ${accuracy.toFixed(2)}%`);
        document.getElementById('detectedLabel').innerHTML = `I might be ${accuracy} % accurate i dunno...`;
}
// async function predictPose(){
//     const data = [
//         {pose:[[
//                 0.4879043996334076,
//                 0.5079793930053711,
//                 -1.0074666738510132,
//                 0.5074002146720886,
//                 0.43172943592071533,
//                 -0.9682395458221436,
//                 0.5229378938674927,
//                 0.4278146028518677,
//                 -0.9682395458221436,
//                 0.5360907316207886,
//                 0.42504405975341797,
//                 -0.9682395458221436,
//                 0.4641141891479492,
//                 0.44364678859710693,
//                 -0.9562800526618958,
//                 0.45031028985977173,
//                 0.4476116895675659,
//                 -0.9562800526618958,
//                 0.4386333227157593,
//                 0.4512709379196167,
//                 -0.9562800526618958,
//                 0.5603331327438354,
//                 0.44633686542510986,
//                 -0.6668606400489807,
//                 0.4252168536186218,
//                 0.47507190704345703,
//                 -0.6209362149238586,
//                 0.520730197429657,
//                 0.5657811164855957,
//                 -0.8907421231269836,
//                 0.4684355556964874,
//                 0.5724985599517822,
//                 -0.8787826299667358,
//                 0.688848078250885,
//                 0.7967308163642883,
//                 -0.4857940971851349,
//                 0.36072757840156555,
//                 0.7992067337036133,
//                 -0.4149939715862274,
//                 0.7413131594657898,
//                 1.2893121242523193,
//                 -0.5156928300857544,
//                 0.3048189580440521,
//                 1.2070677280426025,
//                 -0.5128225088119507,
//                 0.7392048835754395,
//                 1.6068004369735718,
//                 -0.8266392946243286,
//                 0.3072814345359802,
//                 1.5396188497543335,
//                 -0.9562800526618958,
//                 0.7565560340881348,
//                 1.7232608795166016,
//                 -0.9189664721488953,
//                 0.28929418325424194,
//                 1.6605842113494873,
//                 -1.0686992406845093,
//                 0.7287936806678772,
//                 1.723092794418335,
//                 -0.99024498462677,
//                 0.31944727897644043,
//                 1.6606202125549316,
//                 -1.1251479387283325,
//                 0.7155000567436218,
//                 1.674477219581604,
//                 -0.8720853328704834,
//                 0.33352696895599365,
//                 1.617299199104309,
//                 -0.9998126029968262,
//                 0.6364055871963501,
//                 1.5852516889572144,
//                 0.016907716169953346,
//                 0.4202703535556793,
//                 1.5691132545471191,
//                 -0.009986165910959244,
//                 0.6246926188468933,
//                 2.1746957302093506,
//                 -0.04490784928202629,
//                 0.41897261142730713,
//                 2.1520256996154785,
//                 -0.03351644426584244,
//                 0.6082332134246826,
//                 2.711648464202881,
//                 0.5754902362823486,
//                 0.40893715620040894,
//                 2.700535535812378,
//                 0.40279531478881836,
//                 0.6107644438743591,
//                 2.8016998767852783,
//                 0.6405497789382935,
//                 0.4076729416847229,
//                 2.7924985885620117,
//                 0.44058725237846375,
//                 0.5705298185348511,
//                 2.9094295501708984,
//                 0.38916149735450745,
//                 0.41901886463165283,
//                 2.893975257873535,
//                 0.14112186431884766
//             ]], label:"arm down do nothing"},
//         {pose:[[
//                 0.5109395980834961,
//                 0.5292084217071533,
//                 -0.940077006816864,
//                 0.528998613357544,
//                 0.4635878801345825,
//                 -0.8940722346305847,
//                 0.5421433448791504,
//                 0.46212244033813477,
//                 -0.8940722346305847,
//                 0.5536926984786987,
//                 0.46153903007507324,
//                 -0.8940722346305847,
//                 0.4902040958404541,
//                 0.4746103286743164,
//                 -0.888495922088623,
//                 0.4762391746044159,
//                 0.4802677631378174,
//                 -0.888495922088623,
//                 0.4637206196784973,
//                 0.4861910343170166,
//                 -0.888495922088623,
//                 0.5773760676383972,
//                 0.4955223798751831,
//                 -0.576685905456543,
//                 0.4482896625995636,
//                 0.5171219110488892,
//                 -0.5585628151893616,
//                 0.5407119989395142,
//                 0.5872424840927124,
//                 -0.817862331867218,
//                 0.49139225482940674,
//                 0.5914947986602783,
//                 -0.8141447901725769,
//                 0.6868302822113037,
//                 0.8453336954116821,
//                 -0.38964635133743286,
//                 0.3818175792694092,
//                 0.8327123522758484,
//                 -0.36780571937561035,
//                 0.725752592086792,
//                 1.2721706628799438,
//                 -0.4165986478328705,
//                 0.3137884736061096,
//                 1.2643277645111084,
//                 -0.438439279794693,
//                 0.7469125986099243,
//                 1.5819377899169922,
//                 -0.7686047554016113,
//                 0.3102331757545471,
//                 1.568599820137024,
//                 -0.8401677012443542,
//                 0.7689808011054993,
//                 1.6949832439422607,
//                 -0.8652611970901489,
//                 0.2936969995498657,
//                 1.6800827980041504,
//                 -0.9437945485115051,
//                 0.7466354966163635,
//                 1.6926865577697754,
//                 -0.9396123290061951,
//                 0.31819987297058105,
//                 1.6707124710083008,
//                 -1.0130339860916138,
//                 0.7311565279960632,
//                 1.6504132747650146,
//                 -0.8164682388305664,
//                 0.33066439628601074,
//                 1.6321357488632202,
//                 -0.8861724138259888,
//                 0.6354926824569702,
//                 1.591927170753479,
//                 0.027242716401815414,
//                 0.42951059341430664,
//                 1.588005781173706,
//                 -0.020606297999620438,
//                 0.626099169254303,
//                 2.1708242893218994,
//                 -0.04222911596298218,
//                 0.4302898943424225,
//                 2.163137912750244,
//                 -0.0627918466925621,
//                 0.610187292098999,
//                 2.6839046478271484,
//                 0.5599569082260132,
//                 0.4187476634979248,
//                 2.6892433166503906,
//                 0.365249902009964,
//                 0.6095089912414551,
//                 2.7665743827819824,
//                 0.6217612624168396,
//                 0.41295936703681946,
//                 2.772143602371216,
//                 0.40172842144966125,
//                 0.5867685079574585,
//                 2.8667678833007812,
//                 0.38383767008781433,
//                 0.4404841363430023,
//                 2.876678705215454,
//                 0.10897086560726166
//             ]], label:"arm down do nothing"},
//     ]
//     data.sort(() => (Math.random() - 0.5))
//
//     const train = data.slice(0, Math.floor(data.length * 0.8))
//     const test = data.slice(Math.floor(data.length * 0.8) + 1)
//
//     const prediction = await nn.classify(train[0].pose)
//     console.log(`Ik voorspelde: ${prediction[0].label}. Het correcte antwoord is: ${data[0].label}`)
//     console.log(prediction[0].confidence)
// }

async function finishedTraining(){
    console.log("hoooorraaayyyy")
    // predictPose()
        runTestPrediction()
    nn.save()
}